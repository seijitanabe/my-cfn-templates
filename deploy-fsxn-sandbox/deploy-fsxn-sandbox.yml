AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a FSx for ONTAP file system with a volume.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - NamePrefix
          - RemoteAccessCIDR
          - BastionHostImage
          - KeyPairName
          - FsxPassword
    ParameterLabels:
      NamePrefix:
        default: Name prefix
      RemoteAccessCIDR:
        default: Allowed external access CIDR
      BastionHostImage:
        default: AMI ID for the bastion host
      KeyPairName:
        default: SSH key pair name
      FsxPassword:
        default: FSx for ONTAP password

Parameters:
  NamePrefix:
    Description: String, whitch is used as prefixes for all resource names deployed by this CloudFormation stack.
    Type: String
    Default: ""
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range that is permitted to access the instances. We recommend that you set this value to a trusted IP range.
    Type: String
    Default: "0.0.0.0/0"
  BastionHostImage:
    Description: AMI ID of an EC2 instance for the bastion host.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  KeyPairName:
    Description: Name of an existing key pair for the bastion host.
    Type: String
    Default: ""
  FsxPassword:
    Description: fsxadmin and vsadmin user's password.
    Type: String
    Default: ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet2"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: ap-northeast-1d
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet3"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-route"

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  SecurityGroupforBastionHost:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${NamePrefix}-bastion-sg"
      GroupDescription: security group for the bastion host

  SecurityGroupforPublicIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforBastionHost
      Description: Access within a Security Group
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: -1

  SecurityGroupforPublicIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforBastionHost
      Description: SSH access from the specified CIDR IP range
      CidrIp: !Sub "${RemoteAccessCIDR}"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  SecurityGroupforFsx:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${NamePrefix}-fsx-sg"
      GroupDescription: security group for FSx for ONTAP

  SecurityGroupforFsxIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Access within a Security Group
      SourceSecurityGroupId: !Ref SecurityGroupforFsx
      IpProtocol: -1

  SecurityGroupforFsxIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Pinging the instance
      SourceSecurityGroupId: !Ref SecurityGroupforFsx
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1

  SecurityGroupforFsxIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: SSH access to the IP address of the cluster management LIF or a node management LIF
      SourceSecurityGroupId: !Ref SecurityGroupforFsx
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  SecurityGroupforFsxIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Remote procedure call for NFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 111
      ToPort: 111

  SecurityGroupforFsxIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Remote procedure call for CIFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 135
      ToPort: 135

  SecurityGroupforFsxIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NetBIOS service session for CIFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 139
      ToPort: 139

  SecurityGroupforFsxIngress7:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Simple network management protocol (SNMP)
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 161
      ToPort: 161

  SecurityGroupforFsxIngress8:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: ONTAP REST API access to the IP address of the cluster management LIF or an SVM management LIF
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  SecurityGroupforFsxIngress9:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Microsoft SMB/CIFS over TCP with NetBIOS framing
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445

  SecurityGroupforFsxIngress10:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS mount
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 635
      ToPort: 635

  SecurityGroupforFsxIngress11:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Kerberos
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 749
      ToPort: 749

  SecurityGroupforFsxIngress12:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS server daemon
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049

  SecurityGroupforFsxIngress13:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: iSCSI access through the iSCSI data LIF
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 3260
      ToPort: 3260

  SecurityGroupforFsxIngress14:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS lock daemon
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 4045
      ToPort: 4045

  SecurityGroupforFsxIngress15:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Network status monitor for NFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 4046
      ToPort: 4046

  SecurityGroupforFsxIngress16:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Management of intercluster communication sessions for SnapMirror
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 11104
      ToPort: 11104

  SecurityGroupforFsxIngress17:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: SnapMirror data transfer using intercluster LIFs
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: tcp
      FromPort: 11105
      ToPort: 11105

  SecurityGroupforFsxIngress18:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Remote procedure call for NFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 111
      ToPort: 111

  SecurityGroupforFsxIngress19:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Remote procedure call for NFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 135
      ToPort: 135

  SecurityGroupforFsxIngress20:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NetBIOS name resolution for CIFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 137
      ToPort: 137

  SecurityGroupforFsxIngress21:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NetBIOS name resolution for CIFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 139
      ToPort: 139

  SecurityGroupforFsxIngress22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Simple network management protocol (SNMP)
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 161
      ToPort: 161

  SecurityGroupforFsxIngress23:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS mount
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 635
      ToPort: 635

  SecurityGroupforFsxIngress24:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS server daemon
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 2049
      ToPort: 2049

  SecurityGroupforFsxIngress25:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS lock daemon
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 4045
      ToPort: 4045

  SecurityGroupforFsxIngress26:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: Network status monitor for NFS
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 4046
      ToPort: 4046

  SecurityGroupforFsxIngress27:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforFsx
      Description: NFS quota protocol
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: udp
      FromPort: 4049
      ToPort: 4049

  EC2ForBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub "${BastionHostImage}"
      InstanceType: t3.micro
      AvailabilityZone: "ap-northeast-1a"
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-bastion"
      KeyName: !Sub "${KeyPairName}"
      SecurityGroupIds:
        - !Ref SecurityGroupforBastionHost
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            yum update -y
            yum -y install epel-release
            yum -y install unzip wget jq
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            hostnamectl set-hostname ${Prefix}-bastion
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
          - {
              Prefix: !Ref NamePrefix
            }

  FSxFileSystem:
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: ONTAP
      OntapConfiguration:
          DeploymentType: MULTI_AZ_1
          FsxAdminPassword: !Sub "${FsxPassword}"
          PreferredSubnetId: !Ref PublicSubnet1
          RouteTableIds:
            - !Ref PublicRouteTable
          ThroughputCapacity: 128
      SecurityGroupIds:
        - !Ref SecurityGroupforFsx
      StorageCapacity: 1024
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-fsx-fs"

  FSxSVM:
    Type: AWS::FSx::StorageVirtualMachine
    Properties:
      FileSystemId: !Ref FSxFileSystem
      Name: !Sub "${NamePrefix}-svm1"
      SvmAdminPassword: !Sub "${FsxPassword}"

  FSxVol:
    Type: AWS::FSx::Volume
    Properties:
      Name: vol1
      OntapConfiguration:
          JunctionPath: /vol1
          SizeInMegabytes: 10240
          StorageEfficiencyEnabled: true
          StorageVirtualMachineId: !Ref FSxSVM
          TieringPolicy:
              Name: AUTO
      VolumeType: ONTAP
