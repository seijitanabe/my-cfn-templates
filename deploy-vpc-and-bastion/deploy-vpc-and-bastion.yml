AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a new VPC with 3 public subnets and a EC2 instance for the bastion host in ap-northeast-1.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - NamePrefix
          - RemoteAccessCIDR
          - BastionHostImage
          - KeyPairName
    ParameterLabels:
      NamePrefix:
        default: Name prefix
      RemoteAccessCIDR:
        default: Allowed external access CIDR
      BastionHostImage:
        default: AMI ID for the bastion host
      KeyPairName:
        default: SSH key pair name

Parameters:
  NamePrefix:
    Description: String, whitch is used as prefixes for all resource names deployed by this CloudFormation stack.
    Type: String
    Default: ""
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range that is permitted to access the instances. We recommend that you set this value to a trusted IP range.
    Type: String
    Default: "0.0.0.0/0"
  BastionHostImage:
    Description: AMI ID of an EC2 instance for the bastion host.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  KeyPairName:
    Description: Name of an existing key pair for the bastion host.
    Type: String
    Default: ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet2"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: AttachInternetGateway
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: ap-northeast-1d
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-subnet3"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-public-route"

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  SecurityGroupforBastionHost:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${NamePrefix}-bastion-sg"
      GroupDescription: security group for the bastion host

  SecurityGroupforBastionHostIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforBastionHost
      SourceSecurityGroupId: !Ref SecurityGroupforBastionHost
      IpProtocol: -1

  SecurityGroupforBastionHostIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupforBastionHost
      CidrIp: !Sub "${RemoteAccessCIDR}"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  IAMRoleForBastion:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${NamePrefix}-bastion-role"
      Description: IAM role for the bastion host
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  InstanceProfileForBastion:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${NamePrefix}-bastion-instance-profile"
      Roles:
        - !Ref IAMRoleForBastion

  EC2ForBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub "${BastionHostImage}"
      InstanceType: t3.micro
      AvailabilityZone: "ap-northeast-1a"
      Tags:
        - Key: "Name"
          Value: !Sub "${NamePrefix}-bastion"
      KeyName: !Sub "${KeyPairName}"
      SecurityGroupIds:
        - !Ref SecurityGroupforBastionHost
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref InstanceProfileForBastion
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            aws configure set region ap-northeast-1
            yum update -y
            yum -y install epel-release
            yum -y install unzip wget jq
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            hostnamectl set-hostname ${Prefix}-bastion
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
          - {
              Prefix: !Ref NamePrefix
            }
